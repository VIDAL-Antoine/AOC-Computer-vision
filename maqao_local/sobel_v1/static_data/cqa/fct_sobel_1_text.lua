_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 2 occurrences\n - mean: 1 occurrences\n - sort: 1 occurrences\n - stddev: 1 occurrences\n - unknown: 8 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 5 occurrences\n - VCVTSI2SD: 4 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
          details = " - VCVTSI2SD (INT32/64 to FP64, scalar): 4 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "7 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 7 FP arithmetical operations:\n - 3: addition or subtraction\n - 2: multiply\n - 2: divide\nThe binary function is loading 128 bytes (16 double precision FP elements).\nThe binary function is storing 32 bytes (4 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.04 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 128\nnb uops            : 214\nloop length        : 559\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 12\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 5\nADD-SUB / MUL ratio: 1.50\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 35.67 cycles\nfront end            : 35.67 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | ALU0  | ALU1  | ALU2  | ALU3  | AGU0  | AGU1  | FP0  | FP1  | FP2  | FP3\n----------------------------------------------------------------------------------\nuops   | 26.75 | 26.75 | 26.75 | 26.75 | 15.50 | 15.50 | 2.00 | 2.00 | 4.00 | 6.00\ncycles | 26.75 | 26.75 | 26.75 | 26.75 | 15.50 | 15.50 | 2.00 | 2.00 | 4.00 | 6.00\n\nCycles executing div or sqrt instructions: 8.00-10.00\nCycles loading/storing data              : 8.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 35.67\nDispatch  : 26.75\nDIV/SQRT  : 8.00-10.00\nOverall L1: 35.67\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 25%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 66%\nINT+FP\nall     : 7%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 11%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 20%\nload   : 20%\nstore  : 10%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 20%\nFP\nall     : 31%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 41%\nINT+FP\nall     : 23%\nload    : 21%\nstore   : 14%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 24%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 35.67 cycles. At this rate:\n - 11% of peak load performance is reached (3.59 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (0.90 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 35.67 to 26.75 cycles (1.33x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 1160\n\nInstruction                      | Nb FU | ALU0 | ALU1 | ALU2 | ALU3 | AGU0 | AGU1 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %R15                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R14                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R13                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R12                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBP                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBX                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nSUB $0x1000,%RSP                 | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nORQ $0,(%RSP)                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 1\nSUB $0x1000,%RSP                 | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nORQ $0,(%RSP)                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 1\nSUB $0x3d8,%RSP                  | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %FS:0x28,%RAX                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV %RAX,0x23c8(%RSP)            | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nXOR %EAX,%EAX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RSI,%RBX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCMP $0x2,%EDI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJLE 212f <main+0xfcf>            | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x8(%RSI),%RDI               | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0x3eec(%RIP),%RSI\nCALL 1120 <.plt.sec@start+0x50>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x10(%RBX),%RDI              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0x3edf(%RIP),%RSI\nMOV %RAX,%R14                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1120 <.plt.sec@start+0x50>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %RAX,%R15                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nTEST %R14,%R14                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 216e <main+0x100e>            | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nTEST %RAX,%RAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 218f <main+0x102f>            | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nLEA 0x478(%RSP),%RDI\nMOV $0x2a3000,%EDX               | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x20,%ESI                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %EBP,%EBP                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1150 <.plt.sec@start+0x80>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nTEST %EAX,%EAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJNE 1209 <main+0xa9>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x478(%RSP),%RBP             | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0x470(%RSP),%RDI\nMOV $0x2a3000,%EDX               | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x20,%ESI                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %R13D,%R13D                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1150 <.plt.sec@start+0x80>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nTEST %EAX,%EAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 2104 <main+0xfa4>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nXOR %R12D,%R12D                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nXOR %EBX,%EBX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nLEA 0x480(%RSP),%RBX\nMOV %R12,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RBX,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 3c10 <sort>                 | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R12,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RBX,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 3e10 <mean>                 | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R12,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RBX,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nVMOVSD %XMM0,(%RSP)              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1    | 0    | 1       | 1\nCALL 4170 <stddev>               | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x480(%RSP),%RAX             | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nVMOVSD (%RSP),%XMM3              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nVMOVSD %XMM0,%XMM0,%XMM5         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 1       | 0.25\nTEST %RAX,%RAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 2111 <main+0xfb1>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nVXORPD %XMM4,%XMM4,%XMM4         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nVCVTSI2SD %RAX,%XMM4,%XMM7       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nMOV 0x478(%RSP,%R12,8),%RCX      | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nTEST %RCX,%RCX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 214a <main+0xfea>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nVXORPD %XMM1,%XMM1,%XMM1         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nVCVTSI2SD %RCX,%XMM1,%XMM1       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nVMULSD 0x312d(%RIP),%XMM5,%XMM9  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 4       | 0.50\nVMOVSD 0x312d(%RIP),%XMM12       | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nVADDSD %XMM1,%XMM7,%XMM11        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nVMOVSD %XMM7,%XMM7,%XMM0         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 1       | 0.25\nVMULSD 0x3125(%RIP),%XMM11,%XMM2 | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 4       | 0.50\nMOV 0x4fa6(%RIP),%RDI            | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0x2a3000,%ECX               | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x2fba(%RIP),%RDX\nMOV $0x1,%ESI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x6,%EAX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVDIVSD %XMM3,%XMM12,%XMM4        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nVDIVSD %XMM3,%XMM9,%XMM5         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nCALL 1140 <.plt.sec@start+0x70>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %RBP,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10d0 <.plt.sec@start>       | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R13,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10d0 <.plt.sec@start>       | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R14,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10f0 <.plt.sec@start+0x20>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R15,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10f0 <.plt.sec@start+0x20>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nADD $0x23d8,%RSP                 | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPOP %RBX                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %RBP                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R12                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R13                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R14                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R15                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nRET                              | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x470(%RSP),%R13             | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nJMP 122b <main+0xcb>             | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RAX,%RDX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%EAX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVXORPD %XMM0,%XMM0,%XMM0         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RDX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RDX,%RAX                     | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVCVTSI2SD %RAX,%XMM0,%XMM6       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nVADDSD %XMM6,%XMM6,%XMM7         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 2059 <main+0xef9>            | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV (%RSI),%RDX                  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0x1,%EDI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x2eca(%RIP),%RSI\nCALL 1110 <.plt.sec@start+0x40>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV $0x1,%EAX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJMP 20df <main+0xf7f>            | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RCX,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%ECX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVXORPD %XMM2,%XMM2,%XMM2         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RSI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RSI,%RCX                     | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVCVTSI2SD %RCX,%XMM2,%XMM8       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nVADDSD %XMM8,%XMM8,%XMM1         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 2073 <main+0xf13>            | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV 0x10(%RBX),%RDX              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nJMP 2172 <main+0x1012>           | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nNOPW %CS:(%RAX,%RAX,1)           | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nNOP                              | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\n",
        },
      },
      header = {
        "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - The number of fused uops of the instruction [LEA	0x3eec(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0x3edf(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0x478(%RSP),%RDI] is unknown\n - The number of fused uops of the instruction [LEA	0x470(%RSP),%RDI] is unknown\n - The number of fused uops of the instruction [LEA	0x480(%RSP),%RBX] is unknown\n - The number of fused uops of the instruction [LEA	0x2fba(%RIP),%RDX] is unknown\n - The number of fused uops of the instruction [LEA	0x2eca(%RIP),%RSI] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
        "0% of peak computational performance is used (0.20 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 35.67 to 10.00 cycles (3.57x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
          details = "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is probably not vectorized.\nOnly 23% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 35.67 to 5.00 cycles (7.13x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          details = "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 2 occurrences\n - mean: 1 occurrences\n - sort: 1 occurrences\n - stddev: 1 occurrences\n - unknown: 8 occurrences\n",
          title = "CALL instructions",
          txt = "Detected function call instructions.\n",
        },
        {
          details = "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - JMP: 5 occurrences\n - VCVTSI2SD: 4 occurrences\n",
          title = "Complex instructions",
          txt = "Detected COMPLEX INSTRUCTIONS.\n",
        },
        {
          workaround = "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
          details = " - VCVTSI2SD (INT32/64 to FP64, scalar): 4 occurrences\n",
          title = "Conversion instructions",
          txt = "Detected expensive conversion instructions.",
        },
        {
          title = "Type of elements and instruction set",
          txt = "7 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 7 FP arithmetical operations:\n - 3: addition or subtraction\n - 2: multiply\n - 2: divide\nThe binary function is loading 128 bytes (16 double precision FP elements).\nThe binary function is storing 32 bytes (4 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.04 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 128\nnb uops            : 214\nloop length        : 559\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 12\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 5\nADD-SUB / MUL ratio: 1.50\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 35.67 cycles\nfront end            : 35.67 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | ALU0  | ALU1  | ALU2  | ALU3  | AGU0  | AGU1  | FP0  | FP1  | FP2  | FP3\n----------------------------------------------------------------------------------\nuops   | 26.75 | 26.75 | 26.75 | 26.75 | 15.50 | 15.50 | 2.00 | 2.00 | 4.00 | 6.00\ncycles | 26.75 | 26.75 | 26.75 | 26.75 | 15.50 | 15.50 | 2.00 | 2.00 | 4.00 | 6.00\n\nCycles executing div or sqrt instructions: 8.00-10.00\nCycles loading/storing data              : 8.00\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 35.67\nDispatch  : 26.75\nDIV/SQRT  : 8.00-10.00\nOverall L1: 35.67\n",
        },
        {
          title = "Vectorization ratios",
          txt = "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 25%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 66%\nINT+FP\nall     : 7%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 11%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "INT\nall    : 20%\nload   : 20%\nstore  : 10%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 20%\nFP\nall     : 31%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 41%\nINT+FP\nall     : 23%\nload    : 21%\nstore   : 14%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 24%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 35.67 cycles. At this rate:\n - 11% of peak load performance is reached (3.59 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (0.90 out of 16.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 35.67 to 26.75 cycles (1.33x speedup).\n",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 1160\n\nInstruction                      | Nb FU | ALU0 | ALU1 | ALU2 | ALU3 | AGU0 | AGU1 | FP0  | FP1  | FP2  | FP3  | Latency | Recip. throughput\n--------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %R15                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R14                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R13                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %R12                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBP                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nPUSH %RBX                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nSUB $0x1000,%RSP                 | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nORQ $0,(%RSP)                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 1\nSUB $0x1000,%RSP                 | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nORQ $0,(%RSP)                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 1\nSUB $0x3d8,%RSP                  | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV %FS:0x28,%RAX                | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV %RAX,0x23c8(%RSP)            | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 4       | 1\nXOR %EAX,%EAX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RSI,%RBX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCMP $0x2,%EDI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJLE 212f <main+0xfcf>            | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x8(%RSI),%RDI               | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0x3eec(%RIP),%RSI\nCALL 1120 <.plt.sec@start+0x50>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x10(%RBX),%RDI              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0x3edf(%RIP),%RSI\nMOV %RAX,%R14                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1120 <.plt.sec@start+0x50>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %RAX,%R15                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nTEST %R14,%R14                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 216e <main+0x100e>            | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nTEST %RAX,%RAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 218f <main+0x102f>            | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nLEA 0x478(%RSP),%RDI\nMOV $0x2a3000,%EDX               | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x20,%ESI                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %EBP,%EBP                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1150 <.plt.sec@start+0x80>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nTEST %EAX,%EAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJNE 1209 <main+0xa9>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x478(%RSP),%RBP             | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nLEA 0x470(%RSP),%RDI\nMOV $0x2a3000,%EDX               | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x20,%ESI                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nXOR %R13D,%R13D                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 1150 <.plt.sec@start+0x80>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nTEST %EAX,%EAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJE 2104 <main+0xfa4>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nXOR %R12D,%R12D                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nXOR %EBX,%EBX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nLEA 0x480(%RSP),%RBX\nMOV %R12,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RBX,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 3c10 <sort>                 | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R12,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RBX,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 3e10 <mean>                 | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R12,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nMOV %RBX,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nVMOVSD %XMM0,(%RSP)              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 1    | 0    | 1       | 1\nCALL 4170 <stddev>               | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV 0x480(%RSP),%RAX             | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nVMOVSD (%RSP),%XMM3              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nVMOVSD %XMM0,%XMM0,%XMM5         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 1       | 0.25\nTEST %RAX,%RAX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 2111 <main+0xfb1>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nVXORPD %XMM4,%XMM4,%XMM4         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nVCVTSI2SD %RAX,%XMM4,%XMM7       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nMOV 0x478(%RSP,%R12,8),%RCX      | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nTEST %RCX,%RCX                   | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJS 214a <main+0xfea>             | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nVXORPD %XMM1,%XMM1,%XMM1         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nVCVTSI2SD %RCX,%XMM1,%XMM1       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nVMULSD 0x312d(%RIP),%XMM5,%XMM9  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 4       | 0.50\nVMOVSD 0x312d(%RIP),%XMM12       | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 1       | 0.50\nVADDSD %XMM1,%XMM7,%XMM11        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nVMOVSD %XMM7,%XMM7,%XMM0         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 1       | 0.25\nVMULSD 0x3125(%RIP),%XMM11,%XMM2 | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 4       | 0.50\nMOV 0x4fa6(%RIP),%RDI            | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0x2a3000,%ECX               | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x2fba(%RIP),%RDX\nMOV $0x1,%ESI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nMOV $0x6,%EAX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVDIVSD %XMM3,%XMM12,%XMM4        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nVDIVSD %XMM3,%XMM9,%XMM5         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 8-13    | 4-5\nCALL 1140 <.plt.sec@start+0x70>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %RBP,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10d0 <.plt.sec@start>       | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R13,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10d0 <.plt.sec@start>       | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R14,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10f0 <.plt.sec@start+0x20>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV %R15,%RDI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nCALL 10f0 <.plt.sec@start+0x20>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nXOR %EAX,%EAX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nADD $0x23d8,%RSP                 | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nPOP %RBX                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %RBP                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R12                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R13                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R14                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nPOP %R15                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nRET                              | 1     | 0.50 | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50\nMOV 0x470(%RSP),%R13             | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nJMP 122b <main+0xcb>             | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RAX,%RDX                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%EAX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVXORPD %XMM0,%XMM0,%XMM0         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RDX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RDX,%RAX                     | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVCVTSI2SD %RAX,%XMM0,%XMM6       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nVADDSD %XMM6,%XMM6,%XMM7         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 2059 <main+0xef9>            | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV (%RSI),%RDX                  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nMOV $0x1,%EDI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nLEA 0x2eca(%RIP),%RSI\nCALL 1110 <.plt.sec@start+0x40>  | 6     | 1.25 | 1.25 | 1.25 | 1.25 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0       | 1\nMOV $0x1,%EAX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nJMP 20df <main+0xf7f>            | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV %RCX,%RSI                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nAND $0x1,%ECX                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVXORPD %XMM2,%XMM2,%XMM2         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 0.25\nSHR $0x1,%RSI                    | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nOR %RSI,%RCX                     | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nVCVTSI2SD %RCX,%XMM2,%XMM8       | 2     | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 7       | 1\nVADDSD %XMM8,%XMM8,%XMM1         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 3       | 0.50\nJMP 2073 <main+0xf13>            | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nMOV 0x10(%RBX),%RDX              | 1     | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 3       | 0.50\nJMP 2172 <main+0x1012>           | 6     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0       | 2\nNOPW %CS:(%RAX,%RAX,1)           | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\nNOP                              | 1     | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.25\n",
        },
      },
      header = {
        "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - The number of fused uops of the instruction [LEA	0x3eec(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0x3edf(%RIP),%RSI] is unknown\n - The number of fused uops of the instruction [LEA	0x478(%RSP),%RDI] is unknown\n - The number of fused uops of the instruction [LEA	0x470(%RSP),%RDI] is unknown\n - The number of fused uops of the instruction [LEA	0x480(%RSP),%RBX] is unknown\n - The number of fused uops of the instruction [LEA	0x2fba(%RIP),%RDX] is unknown\n - The number of fused uops of the instruction [LEA	0x2eca(%RIP),%RSI] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
        "0% of peak computational performance is used (0.20 out of 24.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 35.67 to 10.00 cycles (3.57x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
          details = "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is probably not vectorized.\nOnly 23% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 35.67 to 5.00 cycles (7.13x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
        {
          workaround = "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  common = {
    header = {
      "The function is defined in:\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:105,112,293\n - /usr/lib/gcc/x86_64-linux-gnu/11/include/mm_malloc.h:45-48,54\n - /home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/rdtsc.h:9-11\n - /home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/sobel.c:21-28,260-278,286,315,328-340,348,354-362,376,397-401\n\n",
      "Warnings:\nIgnoring paths for analysis",
    },
  },
}
