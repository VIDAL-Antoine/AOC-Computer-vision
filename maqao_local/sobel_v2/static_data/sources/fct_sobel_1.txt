/usr/include/x86_64-linux-gnu/bits/stdio2.h: 105 - 293
--------------------------------------------------------------------------------

105:   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
[...]
112:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
[...]
293:     return __fread_alias (__ptr, __size, __n, __stream);
/usr/lib/gcc/x86_64-linux-gnu/11/include/mm_malloc.h: 45 - 54
--------------------------------------------------------------------------------

45:   if (posix_memalign (&__ptr, __alignment, __size) == 0)
46:     return __ptr;
47:   else
48:     return NULL;
[...]
54:   free (__ptr);
/home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/rdtsc.h: 9 - 11
--------------------------------------------------------------------------------

9:   __asm__ volatile ("rdtsc" : "=a" (a), "=d" (d));
10: 
11:   return (d << 32) | a;
/home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/sobel.c: 21 - 398
--------------------------------------------------------------------------------

21:   for (u64 i = 0; i < H * W * 3; i += 3)
22:     {
23:       //Convert RGB color values into grayscale for each pixel using color weights
24:       //Other possible weights: 0.59, 0.30, 0.11
25:       //Principle: mix different quantities of R, G, B to create a variant of gray
26:       gray = ((float)frame[i] * 0.299) + ((float)frame[i + 1] * 0.587) + ((float)frame[i + 2] * 0.114);
27:       
28:       frame[i]     = gray;
[...]
164:   for (u32 i = 0; i < H3; i++)
165:   {
166:     for (u32 j = 0; j < W3_3; j++)
167:     {
168:       u32 gx, i_W3_j, mag_approx; //gy is stored in mag_approx
169:       i_W3_j = i * W3 + j;
170: 
171:       gx = ( cframe[i_W3_j + 8]- cframe[i_W3_j] );
172:       mag_approx = gx;
173:       gx +=           cframe[i_W3_j + 2] - cframe[i_W3_j + 6] + 2 * ( cframe[i_W3_j + 5] - cframe[i_W3_j + 3] );
174:       mag_approx += - cframe[i_W3_j + 2] + cframe[i_W3_j + 6] + 2 * ( cframe[i_W3_j + 7] - cframe[i_W3_j + 1] );
175:       mag_approx = abs(mag_approx) + abs(gx);
176:       oframe[i_W3_j] = (mag_approx > THRESHOLD) ? 255 : (mag_approx);
[...]
257: {
258:   //
259:   if (argc < 3)
260:     return printf("Usage: %s [raw input file] [raw output file]\n", argv[0]), 1;
261:   
262:   u64 cycles[MAX_SAMPLES], cycles_a, cycles_b;
263:   u64 nb_bytes = 1, frame_count = 0, samples_count = 0;
264: 
265:   //
266:   FILE *fpi = fopen(argv[1], "rb"); 
267:   FILE *fpo = fopen(argv[2], "wb");
268: 
269:   //
270:   if (!fpi)
271:     return printf("Error: cannot open file '%s'\n", argv[1]), 2;
272:   
273:   //
274:   if (!fpo)
275:     return printf("Error: cannot open file '%s'\n", argv[2]), 2;
[...]
283:   while ((nb_bytes = fread(cframe, sizeof(u8), H * W * 3, fpi)))
[...]
325:       u64 elapsed = (cycles_a - cycles_b);
326: 
327:       //
328:       if (samples_count < MAX_SAMPLES)
329: 	      cycles[samples_count++] = elapsed;
330:       
331:       //frame number; size in Bytes; elapsed cycles; bytes per cycle
332:       fprintf(stdout, "%20llu; %20llu; %20llu; %15.3lf\n", frame_count, nb_bytes, elapsed, (f64)(nb_bytes) / (f64)elapsed);
333: 
334:       //
335:       frame_count++;
336: #if BASELINE || V1 || V2 || V3
337:       fwrite(oframe, sizeof(u8), H * W * 3, fpo);
[...]
345:   sort(cycles, samples_count);
[...]
351:   mea = mean(cycles, samples_count);
352:   
353:   //
354:   dev = stddev(cycles, samples_count);
355: 
356:   //
357:   min = cycles[0];
358:   max = cycles[samples_count - 1];
359:   avg = (min + max) / 2.0;
[...]
373: 	  (dev * 100.0 / mea));
[...]
394:   fclose(fpi);
395:   fclose(fpo);
396: 
397:   return  0;
398: }
