/usr/include/x86_64-linux-gnu/bits/stdio2.h: 105 - 293
--------------------------------------------------------------------------------

105:   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
[...]
293:     return __fread_alias (__ptr, __size, __n, __stream);
/home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/rdtsc.h: 9 - 11
--------------------------------------------------------------------------------

9:   __asm__ volatile ("rdtsc" : "=a" (a), "=d" (d));
10: 
11:   return (d << 32) | a;
/home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/sobel.c: 21 - 337
--------------------------------------------------------------------------------

21:   for (u64 i = 0; i < H * W * 3; i += 3)
22:     {
23:       //Convert RGB color values into grayscale for each pixel using color weights
24:       //Other possible weights: 0.59, 0.30, 0.11
25:       //Principle: mix different quantities of R, G, B to create a variant of gray
26:       gray = ((float)frame[i] * 0.299) + ((float)frame[i + 1] * 0.587) + ((float)frame[i + 2] * 0.114);
27:       
28:       frame[i]     = gray;
[...]
164:   for (u32 i = 0; i < H3; i++)
165:   {
166:     for (u32 j = 0; j < W3_3; j++)
167:     {
168:       u32 gx, i_W3_j, mag_approx; //gy is stored in mag_approx
169:       i_W3_j = i * W3 + j;
170: 
171:       gx = ( cframe[i_W3_j + 8]- cframe[i_W3_j] );
172:       mag_approx = gx;
173:       gx +=           cframe[i_W3_j + 2] - cframe[i_W3_j + 6] + 2 * ( cframe[i_W3_j + 5] - cframe[i_W3_j + 3] );
174:       mag_approx += - cframe[i_W3_j + 2] + cframe[i_W3_j + 6] + 2 * ( cframe[i_W3_j + 7] - cframe[i_W3_j + 1] );
175:       mag_approx = abs(mag_approx) + abs(gx);
176:       oframe[i_W3_j] = (mag_approx > THRESHOLD) ? 255 : (mag_approx);
[...]
283:   while ((nb_bytes = fread(cframe, sizeof(u8), H * W * 3, fpi)))
[...]
325:       u64 elapsed = (cycles_a - cycles_b);
326: 
327:       //
328:       if (samples_count < MAX_SAMPLES)
329: 	      cycles[samples_count++] = elapsed;
330:       
331:       //frame number; size in Bytes; elapsed cycles; bytes per cycle
332:       fprintf(stdout, "%20llu; %20llu; %20llu; %15.3lf\n", frame_count, nb_bytes, elapsed, (f64)(nb_bytes) / (f64)elapsed);
333: 
334:       //
335:       frame_count++;
336: #if BASELINE || V1 || V2 || V3
337:       fwrite(oframe, sizeof(u8), H * W * 3, fpo);
