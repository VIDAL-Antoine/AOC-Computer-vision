/usr/include/x86_64-linux-gnu/bits/stdio2.h: 105 - 293
--------------------------------------------------------------------------------

105:   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
[...]
112:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
[...]
293:     return __fread_alias (__ptr, __size, __n, __stream);
/usr/lib/gcc/x86_64-linux-gnu/11/include/mm_malloc.h: 45 - 54
--------------------------------------------------------------------------------

45:   if (posix_memalign (&__ptr, __alignment, __size) == 0)
46:     return __ptr;
47:   else
48:     return NULL;
[...]
54:   free (__ptr);
/home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/rdtsc.h: 9 - 11
--------------------------------------------------------------------------------

9:   __asm__ volatile ("rdtsc" : "=a" (a), "=d" (d));
10: 
11:   return (d << 32) | a;
/home/vidal/Desktop/AOC_oseret/Projet/AOC-Computer-vision/sobel.c: 21 - 401
--------------------------------------------------------------------------------

21:   for (u64 i = 0; i < H * W * 3; i += 3)
22:     {
23:       //Convert RGB color values into grayscale for each pixel using color weights
24:       //Other possible weights: 0.59, 0.30, 0.11
25:       //Principle: mix different quantities of R, G, B to create a variant of gray
26:       gray = ((float)frame[i] * 0.299) + ((float)frame[i + 1] * 0.587) + ((float)frame[i + 2] * 0.114);
27:       
28:       frame[i]     = gray;
[...]
201:   #pragma omp parallel for
[...]
260: {
261:   //
262:   if (argc < 3)
263:     return printf("Usage: %s [raw input file] [raw output file]\n", argv[0]), 1;
264:   
265:   u64 cycles[MAX_SAMPLES], cycles_a, cycles_b;
266:   u64 nb_bytes = 1, frame_count = 0, samples_count = 0;
267: 
268:   //
269:   FILE *fpi = fopen(argv[1], "rb"); 
270:   FILE *fpo = fopen(argv[2], "wb");
271: 
272:   //
273:   if (!fpi)
274:     return printf("Error: cannot open file '%s'\n", argv[1]), 2;
275:   
276:   //
277:   if (!fpo)
278:     return printf("Error: cannot open file '%s'\n", argv[2]), 2;
[...]
286:   while ((nb_bytes = fread(cframe, sizeof(u8), H * W * 3, fpi)))
[...]
328:       u64 elapsed = (cycles_a - cycles_b);
329: 
330:       //
331:       if (samples_count < MAX_SAMPLES)
332: 	      cycles[samples_count++] = elapsed;
333:       
334:       //frame number; size in Bytes; elapsed cycles; bytes per cycle
335:       fprintf(stdout, "%20llu; %20llu; %20llu; %15.3lf\n", frame_count, nb_bytes, elapsed, (f64)(nb_bytes) / (f64)elapsed);
336: 
337:       //
338:       frame_count++;
339: #if BASELINE || V1 || V2 || V3
340:       fwrite(oframe, sizeof(u8), H * W * 3, fpo);
[...]
348:   sort(cycles, samples_count);
[...]
354:   mea = mean(cycles, samples_count);
355:   
356:   //
357:   dev = stddev(cycles, samples_count);
358: 
359:   //
360:   min = cycles[0];
361:   max = cycles[samples_count - 1];
362:   avg = (min + max) / 2.0;
[...]
376: 	  (dev * 100.0 / mea));
[...]
397:   fclose(fpi);
398:   fclose(fpo);
399: 
400:   return  0;
401: }
